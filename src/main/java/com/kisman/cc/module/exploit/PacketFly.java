package com.kisman.cc.module.exploit;

import com.kisman.cc.Kisman;
import com.kisman.cc.event.Event;
import com.kisman.cc.event.events.EventPlayerMotionUpdate;
import com.kisman.cc.event.events.PacketEvent;
import com.kisman.cc.module.Category;
import com.kisman.cc.module.Module;
import com.kisman.cc.settings.Setting;
import com.kisman.cc.util.MathUtil;
import i.gishreloaded.gishcode.utils.TimerUtils;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public class PacketFly extends Module {
    private Setting antiKick = new Setting("AntiKick", this, false);
    private Setting mode = new Setting("Mode", this, "Up", new ArrayList<>(Arrays.asList("Preserve", "Up", "Down")));

    private Random random = new Random();
    private TimerUtils timer = new TimerUtils();

    public PacketFly() {
        super("PacketFly", "PacketFly", Category.EXPLOIT);

        setmgr.rSetting(antiKick);
        setmgr.rSetting(mode);
    }

    public void onEnable() {
        Kisman.EVENT_BUS.subscribe(receiveListener);
        Kisman.EVENT_BUS.subscribe(playerMotionUpdateListener);
    }

    public void onDisable() {
        Kisman.EVENT_BUS.unsubscribe(receiveListener);
        Kisman.EVENT_BUS.unsubscribe(playerMotionUpdateListener);
    }

    @EventHandler
    private final Listener<PacketEvent.Receive> receiveListener = new Listener<>(event -> {
        if(event.getPacket() instanceof SPacketPlayerPosLook && mc.currentScreen == null) {
            SPacketPlayerPosLook packet = (SPacketPlayerPosLook) event.getPacket();

            mc.player.connection.sendPacket(new CPacketConfirmTeleport(packet.getTeleportId()));
            mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));

            mc.player.setPosition(packet.getX(), packet.getY(), packet.getZ());

            event.cancel();
        }
    });

    @EventHandler
    private final Listener<EventPlayerMotionUpdate> playerMotionUpdateListener = new Listener<>(event -> {
        if(event.getEra() != Event.Era.PRE) {
            return;
        }

        mc.player.setVelocity(0, 0, 0);

        event.cancel();

        float speedY = 0;


        if(mc.player.movementInput.jump) {
            if(!timer.hasReached(3000)) {
                speedY = mc.player.ticksExisted == 0 ? -0.04f : 0.031f;
            } else {
                timer.reset();
                speedY = -0.08f;
            }
        } else if(mc.player.movementInput.sneak) {
            speedY = -0.0031f;
        } else if(mc.player.ticksExisted % 4 == 0 && antiKick.getValBoolean()) {
            speedY = -0.04f;
        }

        final double[] dir = MathUtil.directionSpeed(0.031);

        mc.player.motionX = dir[0];
        mc.player.motionY = speedY;
        mc.player.motionZ = dir[1];

        mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(
                mc.player.posX + mc.player.motionX,
                mc.player.posY + mc.player.motionY,
                mc.player.posZ + mc.player.motionY,
                mc.player.cameraYaw,
                mc.player.cameraPitch,
                mc.player.onGround
        ));

        double x = mc.player.posX + mc.player.motionX;
        double y = mc.player.posY + mc.player.motionY;
        double z = mc.player.posZ + mc.player.motionZ;

        switch (mode.getValString()) {
            case "Down":
                y -= -1337;
                break;

            case "Preserve":
                x += random.nextInt(100000);
                z += random.nextInt(100000);
                break;

            case "Up":
                y += 1337;
                break;

            default:
                break;
        }

        mc.player.connection.sendPacket(new CPacketPlayer.Position(x, y, z, mc.player.onGround));
    });
}
